//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Invert.uFrame.Editor {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using Invert.Core;
    using Invert.Core.GraphDesigner;
    
    
    public class GameFrameworkBase : Invert.Core.GraphDesigner.DiagramPlugin {
        
        private Invert.Core.GraphDesigner.NodeConfig<ElementNode> _Element;
        
        private Invert.Core.GraphDesigner.NodeConfig<ElementComputedPropertyNode> _ElementComputedProperty;
        
        private Invert.Core.GraphDesigner.NodeConfig<SceneManagerNode> _SceneManager;
        
        private Invert.Core.GraphDesigner.NodeConfig<SubsystemNode> _Subsystem;
        
        private Invert.Core.GraphDesigner.NodeConfig<ElementViewNode> _ElementView;
        
        private Invert.Core.GraphDesigner.NodeConfig<ElementViewComponentNode> _ElementViewComponent;
        
        private Invert.Core.GraphDesigner.NodeConfig<ElementsGraphRootNode> _ElementsGraphRoot;
        
        private Invert.Core.GraphDesigner.NodeConfig<StateMachineNode> _StateMachine;
        
        private Invert.Core.GraphDesigner.NodeConfig<StateNode> _State;
        
        public Invert.Core.GraphDesigner.NodeConfig<ElementNode> Element {
            get {
                return _Element;
            }
            set {
                _Element = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<ElementComputedPropertyNode> ElementComputedProperty {
            get {
                return _ElementComputedProperty;
            }
            set {
                _ElementComputedProperty = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<SceneManagerNode> SceneManager {
            get {
                return _SceneManager;
            }
            set {
                _SceneManager = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<SubsystemNode> Subsystem {
            get {
                return _Subsystem;
            }
            set {
                _Subsystem = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<ElementViewNode> ElementView {
            get {
                return _ElementView;
            }
            set {
                _ElementView = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<ElementViewComponentNode> ElementViewComponent {
            get {
                return _ElementViewComponent;
            }
            set {
                _ElementViewComponent = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<ElementsGraphRootNode> ElementsGraphRoot {
            get {
                return _ElementsGraphRoot;
            }
            set {
                _ElementsGraphRoot = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<StateMachineNode> StateMachine {
            get {
                return _StateMachine;
            }
            set {
                _StateMachine = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<StateNode> State {
            get {
                return _State;
            }
            set {
                _State = value;
            }
        }
        
        public virtual Invert.Core.GraphDesigner.SelectItemTypeCommand GetPropertySelectionCommand() {
            return new SelectItemTypeCommand() { IncludePrimitives = true, AllowNone = false };
        }
        
        public virtual Invert.Core.GraphDesigner.SelectItemTypeCommand GetCollectionSelectionCommand() {
            return new SelectItemTypeCommand() { IncludePrimitives = true, AllowNone = false };
        }
        
        public virtual Invert.Core.GraphDesigner.SelectItemTypeCommand GetCommandSelectionCommand() {
            return new SelectItemTypeCommand() { IncludePrimitives = true, AllowNone = false };
        }
        
        public override void Initialize(Invert.Core.uFrameContainer container) {
            container.RegisterInstance<IEditorCommand>(GetPropertySelectionCommand(), typeof(PropertyChildItem).Name + "TypeSelection");;
            container.RegisterInstance<IEditorCommand>(GetCollectionSelectionCommand(), typeof(CollectionChildItem).Name + "TypeSelection");;
            container.RegisterInstance<IEditorCommand>(GetCommandSelectionCommand(), typeof(CommandChildItem).Name + "TypeSelection");;
            container.AddTypeItem<PropertyChildItem>();
            container.AddTypeItem<CollectionChildItem>();
            container.AddTypeItem<CommandChildItem>();
            container.AddItem<SubsystemSlot>();
            container.AddItem<RegisteredInstanceReference>();
            container.AddItem<ExportSubSystemSlot>();
            container.AddItem<ImportSubSystemSlot>();
            container.AddItem<SceneManagerTransitionReference>();
            container.AddItem<ScenePropertiesSlot>();
            container.AddItem<ViewBindingsReference>();
            container.AddItem<ComputedSubPropertiesReference>();
            container.AddItem<StateMachineTransitionChildItem>();
            container.AddItem<StateTransitionReference>();
            Element = container.AddNode<ElementNode>("Element");
            Element.Inheritable();
            Element.HasSubNode<ElementViewNode>();
            Element.HasSubNode<ElementViewComponentNode>();
            Element.HasSubNode<ElementComputedPropertyNode>();
            Element.HasSubNode<StateMachineNode>();
            ElementComputedProperty = container.AddNode<ElementComputedPropertyNode>("ElementComputedProperty");
            ElementComputedProperty.Color(NodeColor.Green);
            SceneManager = container.AddNode<SceneManagerNode>("SceneManager");
            SceneManager.Color(NodeColor.Black);
            Subsystem = container.AddNode<SubsystemNode>("Subsystem");
            Subsystem.Color(NodeColor.DarkGray);
            Subsystem.HasSubNode<ElementNode>();
            ElementView = container.AddNode<ElementViewNode>("ElementView");
            ElementView.Inheritable();
            ElementView.Color(NodeColor.Blue);
            ElementViewComponent = container.AddNode<ElementViewComponentNode>("ElementViewComponent");
            ElementViewComponent.Inheritable();
            ElementViewComponent.Color(NodeColor.Orange);
            ElementsGraphRoot = container.AddGraph<ElementsGraph, ElementsGraphRootNode>("ElementsGraph");
            ElementsGraphRoot.HasSubNode<SceneManagerNode>();
            ElementsGraphRoot.HasSubNode<SubsystemNode>();
            StateMachine = container.AddGraph<StateMachineGraph, StateMachineNode>("StateMachineGraph");
            StateMachine.Color(NodeColor.Purple);
            StateMachine.HasSubNode<StateNode>();
            State = container.AddNode<StateNode>("State");
            State.Color(NodeColor.DarkGray);
            container.Connectable<ElementNode,ElementViewNode>();
            container.Connectable<ElementComputedPropertyNode,ElementComputedPropertyNode>();
            container.Connectable<ElementViewNode,ElementViewComponentNode>();
            container.Connectable<PropertyChildItem,ElementNode>();
            container.Connectable<PropertyChildItem,ElementComputedPropertyNode>();
            container.Connectable<CollectionChildItem,ElementNode>();
            container.Connectable<CommandChildItem,ElementNode>();
            container.Connectable<SceneManagerTransitionReference,SceneManagerNode>();
            container.Connectable<IRegisteredInstance,RegisteredInstanceReference>();
            container.Connectable<ISceneManagerTransition,SceneManagerTransitionReference>();
            container.Connectable<IViewBindings,ViewBindingsReference>();
            container.Connectable<IComputedSubProperties,ComputedSubPropertiesReference>();
            container.Connectable<IStateTransition,StateTransitionReference>();
        }
    }
    
    public class ElementsGraphBase : GenericGraphData<ElementsGraphRootNode> {
    }
    
    public class StateMachineGraphBase : GenericGraphData<StateMachineNode> {
    }
    
    public class ElementNodeBase : Invert.Core.GraphDesigner.GenericInheritableNode, IRegisteredInstance {
        
        [Invert.Core.GraphDesigner.Section("Properties", SectionVisibility.Always, OrderIndex=0)]
        public virtual System.Collections.Generic.IEnumerable<PropertyChildItem> Properties {
            get {
                return ChildItems.OfType<PropertyChildItem>();
            }
        }
        
        [Invert.Core.GraphDesigner.Section("Collections", SectionVisibility.Always, OrderIndex=0)]
        public virtual System.Collections.Generic.IEnumerable<CollectionChildItem> Collections {
            get {
                return ChildItems.OfType<CollectionChildItem>();
            }
        }
        
        [Invert.Core.GraphDesigner.Section("Commands", SectionVisibility.Always, OrderIndex=0)]
        public virtual System.Collections.Generic.IEnumerable<CommandChildItem> Commands {
            get {
                return ChildItems.OfType<CommandChildItem>();
            }
        }
        
        public virtual System.Collections.Generic.IEnumerable<ElementComputedPropertyNode> ComputedProperties {
            get {
                yield break;
            }
        }
    }
    
    public class ElementComputedPropertyNodeBase : Invert.Core.GraphDesigner.GenericNode {
        
        public virtual System.Collections.Generic.IEnumerable<IComputedSubProperties> PossibleProperties {
            get {
                return this.Project.AllGraphItems.OfType<IComputedSubProperties>();
            }
        }
        
        [Invert.Core.GraphDesigner.ReferenceSection("Properties", SectionVisibility.Always, false, false, typeof(IComputedSubProperties), false, OrderIndex=0, HasPredefinedOptions=false)]
        public virtual System.Collections.Generic.IEnumerable<ComputedSubPropertiesReference> Properties {
            get {
                return ChildItems.OfType<ComputedSubPropertiesReference>();
            }
        }
    }
    
    public class SceneManagerNodeBase : Invert.Core.GraphDesigner.GenericNode {
        
        private SubsystemSlot _SubsystemInputSlot;
        
        public virtual System.Collections.Generic.IEnumerable<ISceneManagerTransition> PossibleTrnasitions {
            get {
                return this.Project.AllGraphItems.OfType<ISceneManagerTransition>();
            }
        }
        
        [Invert.Core.GraphDesigner.ReferenceSection("Trnasitions", SectionVisibility.Always, false, false, typeof(ISceneManagerTransition), false, OrderIndex=0, HasPredefinedOptions=false)]
        public virtual System.Collections.Generic.IEnumerable<SceneManagerTransitionReference> Trnasitions {
            get {
                return ChildItems.OfType<SceneManagerTransitionReference>();
            }
        }
        
        public virtual System.Collections.Generic.IEnumerable<RegisteredInstanceReference> ImportedItems {
            get {
                yield break;
            }
        }
        
        [Invert.Core.GraphDesigner.InputSlot("Subsystem", false, SectionVisibility.Always, OrderIndex=0)]
        public virtual SubsystemSlot SubsystemInputSlot {
            get {
                return _SubsystemInputSlot;
            }
            set {
                _SubsystemInputSlot = value;
            }
        }
    }
    
    public class SubsystemNodeBase : Invert.Core.GraphDesigner.GenericNode {
        
        private ImportSubSystemSlot _ImportInputSlot;
        
        private ExportSubSystemSlot _ExportOutputSlot;
        
        public virtual System.Collections.Generic.IEnumerable<IRegisteredInstance> PossibleRegisteredInstance {
            get {
                return this.Project.AllGraphItems.OfType<IRegisteredInstance>();
            }
        }
        
        [Invert.Core.GraphDesigner.ReferenceSection("RegisteredInstance", SectionVisibility.Always, false, false, typeof(IRegisteredInstance), true, OrderIndex=0, HasPredefinedOptions=false)]
        public virtual System.Collections.Generic.IEnumerable<RegisteredInstanceReference> RegisteredInstance {
            get {
                return ChildItems.OfType<RegisteredInstanceReference>();
            }
        }
        
        public virtual System.Collections.Generic.IEnumerable<RegisteredInstanceReference> AvailableInstances {
            get {
                yield break;
            }
        }
        
        [Invert.Core.GraphDesigner.InputSlot("Import", true, SectionVisibility.WhenNodeIsNotFilter, OrderIndex=0)]
        public virtual ImportSubSystemSlot ImportInputSlot {
            get {
                return _ImportInputSlot;
            }
            set {
                _ImportInputSlot = value;
            }
        }
        
        [Invert.Core.GraphDesigner.OutputSlot("Export", true, SectionVisibility.WhenNodeIsNotFilter, OrderIndex=0)]
        public virtual ExportSubSystemSlot ExportOutputSlot {
            get {
                return _ExportOutputSlot;
            }
            set {
                _ExportOutputSlot = value;
            }
        }
    }
    
    public class ElementViewNodeBase : Invert.Core.GraphDesigner.GenericInheritableNode {
        
        private ScenePropertiesSlot _ScenePropertiesInputSlot;
        
        public virtual System.Collections.Generic.IEnumerable<IViewBindings> PossibleBindings {
            get {
                return this.Project.AllGraphItems.OfType<IViewBindings>();
            }
        }
        
        [Invert.Core.GraphDesigner.ReferenceSection("Bindings", SectionVisibility.Always, false, false, typeof(IViewBindings), false, OrderIndex=2, HasPredefinedOptions=true)]
        public virtual System.Collections.Generic.IEnumerable<ViewBindingsReference> Bindings {
            get {
                return ChildItems.OfType<ViewBindingsReference>();
            }
        }
        
        [Invert.Core.GraphDesigner.InputSlot("SceneProperties", true, SectionVisibility.Always, OrderIndex=0)]
        public virtual ScenePropertiesSlot ScenePropertiesInputSlot {
            get {
                return _ScenePropertiesInputSlot;
            }
            set {
                _ScenePropertiesInputSlot = value;
            }
        }
    }
    
    public class ElementViewComponentNodeBase : Invert.Core.GraphDesigner.GenericInheritableNode {
    }
    
    public class ElementsGraphRootNodeBase : Invert.Core.GraphDesigner.GenericNode {
    }
    
    public class StateMachineNodeBase : Invert.Core.GraphDesigner.GenericNode {
    }
    
    public class StateNodeBase : Invert.Core.GraphDesigner.GenericNode {
    }
    
    public class SubsystemSlotBase : SingleInputSlot<ISubsystemSlot> {
    }
    
    public partial interface ISubsystemSlot : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class ExportSubSystemSlotBase : MultiOutputSlot<IExportSubSystemSlot>, ISubsystemSlot, IImportSubSystemSlot {
    }
    
    public partial interface IExportSubSystemSlot : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class ImportSubSystemSlotBase : MultiInputSlot<IImportSubSystemSlot>, IExportSubSystemSlot {
    }
    
    public partial interface IImportSubSystemSlot : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class ScenePropertiesSlotBase : MultiInputSlot<IScenePropertiesSlot> {
    }
    
    public partial interface IScenePropertiesSlot : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class RegisteredInstanceReferenceBase : Invert.Core.GraphDesigner.GenericReferenceItem<IRegisteredInstance> {
    }
    
    public partial interface IRegisteredInstance : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class SceneManagerTransitionReferenceBase : Invert.Core.GraphDesigner.GenericReferenceItem<ISceneManagerTransition> {
    }
    
    public partial interface ISceneManagerTransition : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class ViewBindingsReferenceBase : Invert.Core.GraphDesigner.GenericReferenceItem<IViewBindings> {
    }
    
    public partial interface IViewBindings : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class ComputedSubPropertiesReferenceBase : Invert.Core.GraphDesigner.GenericReferenceItem<IComputedSubProperties> {
    }
    
    public partial interface IComputedSubProperties : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class StateTransitionReferenceBase : Invert.Core.GraphDesigner.GenericReferenceItem<IStateTransition> {
    }
    
    public partial interface IStateTransition : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class PropertyChildItemBase : GenericTypedChildItem, IScenePropertiesSlot, IViewBindings, IComputedSubProperties {
    }
    
    public class CollectionChildItemBase : GenericTypedChildItem, IViewBindings {
    }
    
    public class CommandChildItemBase : GenericTypedChildItem, ISceneManagerTransition, IViewBindings {
    }
    
    public class StateMachineTransitionChildItemBase : Invert.Core.GraphDesigner.GenericNodeChildItem {
    }
}
